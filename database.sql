-- Enable RLS
alter table auth.users enable row level security;

-- Create tables
create table public.lists (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users(id) on delete cascade not null,
  name text not null,
  type text not null check (type in ('tasks', 'text')),
  is_template boolean default false,
  is_deleted boolean default false,
  recurring_schedule jsonb,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table public.items (
  id bigint generated by default as identity primary key,
  list_id bigint references public.lists(id) on delete cascade not null,
  text text not null,
  type text not null check (type in ('task', 'text')),
  priority text check (priority in ('low', 'medium', 'high')),
  completed boolean default false,
  is_deleted boolean default false,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  deleted_at timestamp with time zone
);

-- Enable RLS on tables
alter table public.lists enable row level security;
alter table public.items enable row level security;

-- Create policies
create policy "Users can view their own lists"
  on public.lists for select
  using (auth.uid() = user_id);

create policy "Users can insert their own lists"
  on public.lists for insert
  with check (auth.uid() = user_id);

create policy "Users can update their own lists"
  on public.lists for update
  using (auth.uid() = user_id);

create policy "Users can delete their own lists"
  on public.lists for delete
  using (auth.uid() = user_id);

create policy "Users can view items in their lists"
  on public.items for select
  using (
    exists (
      select 1 from public.lists
      where lists.id = items.list_id
      and lists.user_id = auth.uid()
    )
  );

create policy "Users can insert items in their lists"
  on public.items for insert
  with check (
    exists (
      select 1 from public.lists
      where lists.id = list_id
      and lists.user_id = auth.uid()
    )
  );

create policy "Users can update items in their lists"
  on public.items for update
  using (
    exists (
      select 1 from public.lists
      where lists.id = items.list_id
      and lists.user_id = auth.uid()
    )
  );

create policy "Users can delete items in their lists"
  on public.items for delete
  using (
    exists (
      select 1 from public.lists
      where lists.id = items.list_id
      and lists.user_id = auth.uid()
    )
  );

-- Create indexes
create index lists_user_id_idx on public.lists(user_id);
create index items_list_id_idx on public.items(list_id);